
프로그래밍이란?
    계획(또는 수행 절차)
컴퓨터의 구성
    CPU - 중앙처리장치 - 산술/논리 연산
                      - 흐름 제어
    Memory - 주기억장치 - 임시 저장소
    HDD/ODD/... - 다양한 입/출력장치 - 데이터 소스/ 영구저장소

컴퓨터 프로그램이란?
    - 컴퓨터를 이용한 절차를 만들어 놓은 것

CPU - 계산 능력과 순서를 제어하는 중앙처리장치
    - ALU (산술연살, 논리연산유닛) CU(흐름제어유닛)
    - 레지스터 - 데이터를 처리기 위한 임시저장소
    - L1캐시, L2캐시, L3캐시

컴파일러에 의해서 정해지는 기호와 문법
 - 컴파일러에 따라 달라질 수 있다. 

 컴파일언어 - 컴파일러 어셈블리어 - 어셈블러 ==> 기계어

 고급언어
 - 연산자, 제어구조, 변수, 배열
 API (Application Programming Interface) 플랫폼
 - 콘솔, 파일

 절차 언어 -> 프로그램 -> API(함수형태) -> 플랫폼
 그렇다면 API는 함수인가? 그것은 아님. 
 함수를 정의하게 된다면 -> 코드 파편화, 코드 집중화, 코드 은닉화

 언어보다는 플랫폼이 선택의 기준이 되어야 한다.
 웹 플랫폼 => javascript, typescript
 가상머신 플랫폼 => java, c#, kotlin
 모바일 플랫폼 => kotlin, c#, swift
 운영체제 => c,c++
 물리장치 => assembly

 01.
 Double 타입의 값은 동등 연산자 ==를 사용해 비교하면 안 된다.
 Double 타입은 정확성을 보장하지 않는다. 
 따라서 사람키를 잴 때처럼 정확성이 필요요건이 아닐때만 double을 사용해야 한다.

 02.
 0과 자연수는 int 타입, 실수는 double 타입을 사용하자
 decimal은 금융, 캐드, 공학분야 등 실수의 정확성을 필수로 하는 곳에 사용하자

 03. 
 Object 타입은 어떤 타입의 데이터도 저장할 수 있는 특별한 타입이다.
 하지만 이런 유연함은 코드를 지저분하게 하고, 박싱, 언박싱 과정을 거치므로 성능 저하도 가져온다. 

 04. 
 Dynamic 타입도 어떤 타입의 데이터도 저장할 수 있는 특별한 타입이다.
 하지만 이런 유연함은 성능 저하도 가져온다. object 타입과 다른 점은 아래 코드처럼 명시적 타입 변환 없이 
 멤버호출이 가능하다.

 05.
 var 사용이 편리하기는 하지만 코드를 읽을 때 실제 타입을 더 쉽게 파악할 수 있도록 var 사용을 자제하는 것이 좋다.
 타입을 확실하게 알 수 있을 때만 var를 사용하자. 

 06. 
 값타입이 선언될 때 null로 선언되게 하려면 접미사 ?를 붙이면 이렇게 사용할 수 있다.
 ex) int? ICannotNull = null ==> null로 선언됨

 06-1
 찾아보기

 sbyte, byte, short, ushort, int, uint, long, ulong, float, double, decimal

 06-2
 FizzBuzz는 어린이에게 나눗셈을 가르치기 위한 단어게임이다.
 숫자를 증가시키면서 3으로 나눌수잇으면 fizz, 5로 나눌수 있으면 buzz, 3과 5모두로 나눌 수 있으면 FizzBuzz로 바꾼다.
 개발자 채용 면접에서도 종종 면접관이 지원자에게 화이트 보드에 이 문제를 코드로 풀어보도록 한다.
 기본 소양이 있는 개발자라면 몇 분안에 fizzbuzz게임을 코드로 풀 수 있어야 한다.

 07-01
 bootstrap 
 nav 쪽에서 right 로 사용할 수 있는 class
 ==> .ml-auto 사용하면 됨